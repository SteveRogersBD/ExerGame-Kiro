openapi: 3.0.3
info:
  title: Exergame REST API
  version: "v1"
  description: >
    REST API for Parents, Children, Videos, Questions, Homework, Scores, and Sessions.

servers:
  - url: http://localhost:8080

tags:
  - name: Parent
  - name: Child
  - name: Video
  - name: Question
  - name: Homework
  - name: Score
  - name: Session

paths:
  /parent:
    get:
      tags: [Parent]
      summary: List parents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Parent" }
    post:
      tags: [Parent]
      summary: Create parent
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ParentCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Parent" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /parent/{id}:
    get:
      tags: [Parent]
      summary: Get parent by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Parent" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Parent]
      summary: Update parent
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ParentUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Parent" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Parent]
      summary: Delete parent
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

  /parent/signin:
    post:
      tags: [Parent]
      summary: Sign in by email & password
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ParentSignInRequest" }
      responses:
        "200":
          description: Authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Parent" }
        "404":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /child:
    get:
      tags: [Child]
      summary: List children (optionally by parent)
      parameters:
        - in: query
          name: parentId
          schema: { type: integer, format: int64 }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Child" }
    post:
      tags: [Child]
      summary: Create child
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ChildCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Child" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /child/{id}:
    get:
      tags: [Child]
      summary: Get child by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Child" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Child]
      summary: Update child
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ChildUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Child" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Child]
      summary: Delete child
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

  /video:
    get:
      tags: [Video]
      summary: List videos
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Video" }
    post:
      tags: [Video]
      summary: Create video
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VideoCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Video" }

  /video/{id}:
    get:
      tags: [Video]
      summary: Get video by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Video" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Video]
      summary: Update video
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VideoUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Video" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Video]
      summary: Delete video
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

  /question:
    get:
      tags: [Question]
      summary: List questions (optionally by video)
      parameters:
        - in: query
          name: videoId
          schema: { type: integer, format: int64 }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Question" }
    post:
      tags: [Question]
      summary: Create question
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/QuestionCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Question" }

  /question/{id}:
    get:
      tags: [Question]
      summary: Get question by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Question" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Question]
      summary: Update question
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/QuestionUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Question" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Question]
      summary: Delete question
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

  /homework:
    get:
      tags: [Homework]
      summary: List homework (filter by parent/child/video/status)
      parameters:
        - in: query
          name: parentId
          schema: { type: integer, format: int64 }
        - in: query
          name: childId
          schema: { type: integer, format: int64 }
        - in: query
          name: videoId
          schema: { type: integer, format: int64 }
        - in: query
          name: status
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Homework" }
    post:
      tags: [Homework]
      summary: Assign homework
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/HomeworkCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Homework" }

  /homework/{id}:
    get:
      tags: [Homework]
      summary: Get homework by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Homework" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Homework]
      summary: Update homework (e.g., status)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/HomeworkUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Homework" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Homework]
      summary: Delete homework
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

  /score:
    get:
      tags: [Score]
      summary: List scores (optionally by child/video)
      parameters:
        - in: query
          name: childId
          schema: { type: integer, format: int64 }
        - in: query
          name: videoId
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Score" }
    post:
      tags: [Score]
      summary: Create score
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ScoreCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Score" }

  /score/{id}:
    get:
      tags: [Score]
      summary: Get score by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Score" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Score]
      summary: Update score
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ScoreUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Score" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Score]
      summary: Delete score
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

  /session:
    get:
      tags: [Session]
      summary: List sessions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Session" }
    post:
      tags: [Session]
      summary: Create session
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SessionCreateRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Session" }

  /session/{id}:
    get:
      tags: [Session]
      summary: Get session by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Session" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Session]
      summary: Update session
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SessionUpdateRequest" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Session" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Session]
      summary: Delete session
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: Deleted }
        "404": { $ref: "#/components/responses/NotFound" }

components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

  schemas:
    Error:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        status: { type: integer }
        error: { type: string }
        message: { type: string }
        path: { type: string }

    Parent:
      type: object
      properties:
        id: { type: integer, format: int64 }
        fullName: { type: string }
        username: { type: string }
        email: { type: string }
        dp: { type: string, nullable: true, description: "avatar url" }
        createdAt: { type: string, format: date-time }
    ParentCreateRequest:
      type: object
      required: [fullName, username, email, password]
      properties:
        fullName: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
        dp: { type: string, nullable: true }
    ParentUpdateRequest:
      type: object
      properties:
        fullName: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        dp: { type: string, nullable: true }
    ParentSignInRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    Child:
      type: object
      properties:
        id: { type: integer, format: int64 }
        fullName: { type: string }
        gender: { type: string, enum: [M, F, O], nullable: true }
        dateOfBirth: { type: string, format: date, nullable: true }
        avatar: { type: string, nullable: true }
        parentId: { type: integer, format: int64 }
        createdAt: { type: string, format: date-time }
    ChildCreateRequest:
      type: object
      required: [fullName, parentId]
      properties:
        fullName: { type: string }
        gender: { type: string, enum: [M, F, O], nullable: true }
        dateOfBirth: { type: string, format: date, nullable: true }
        avatar: { type: string, nullable: true }
        parentId: { type: integer, format: int64 }
    ChildUpdateRequest:
      type: object
      properties:
        fullName: { type: string }
        gender: { type: string, enum: [M, F, O], nullable: true }
        dateOfBirth: { type: string, format: date, nullable: true }
        avatar: { type: string, nullable: true }
        parentId: { type: integer, format: int64 }

    Video:
      type: object
      properties:
        id: { type: integer, format: int64 }
        title: { type: string }
        url: { type: string }
        createdAt: { type: string, format: date-time }
    VideoCreateRequest:
      type: object
      required: [title, url]
      properties:
        title: { type: string }
        url: { type: string }
    VideoUpdateRequest:
      type: object
      properties:
        title: { type: string }
        url: { type: string }

    Question:
      type: object
      properties:
        id: { type: integer, format: int64 }
        videoId: { type: integer, format: int64 }
        timeToStop: { type: string, example: "0:08:26" }
        question: { type: string }
        optA: { type: string }
        optB: { type: string }
        optC: { type: string }
        correctAns: { type: string, enum: [A, B, C] }
    QuestionCreateRequest:
      type: object
      required: [videoId, timeToStop, question, optA, optB, optC, correctAns]
      properties:
        videoId: { type: integer, format: int64 }
        timeToStop: { type: string }
        question: { type: string }
        optA: { type: string }
        optB: { type: string }
        optC: { type: string }
        correctAns: { type: string, enum: [A, B, C] }
    QuestionUpdateRequest:
      type: object
      properties:
        videoId: { type: integer, format: int64 }
        timeToStop: { type: string }
        question: { type: string }
        optA: { type: string }
        optB: { type: string }
        optC: { type: string }
        correctAns: { type: string, enum: [A, B, C] }

    Homework:
      type: object
      properties:
        id: { type: integer, format: int64 }
        title: { type: string }
        videoId: { type: integer, format: int64 }
        childId: { type: integer, format: int64 }
        parentId: { type: integer, format: int64 }
        status: { type: string, example: "ASSIGNED" }
    HomeworkCreateRequest:
      type: object
      required: [title, videoId, childId, parentId]
      properties:
        title: { type: string }
        videoId: { type: integer, format: int64 }
        childId: { type: integer, format: int64 }
        parentId: { type: integer, format: int64 }
        status: { type: string }
    HomeworkUpdateRequest:
      type: object
      properties:
        title: { type: string }
        videoId: { type: integer, format: int64 }
        childId: { type: integer, format: int64 }
        parentId: { type: integer, format: int64 }
        status: { type: string }

    Score:
      type: object
      properties:
        id: { type: integer, format: int64 }
        childId: { type: integer, format: int64 }
        videoId: { type: integer, format: int64 }
        score: { type: integer }
        percentage: { type: number, format: float }
    ScoreCreateRequest:
      type: object
      required: [childId, videoId, score]
      properties:
        childId: { type: integer, format: int64 }
        videoId: { type: integer, format: int64 }
        score: { type: integer }
        percentage: { type: number, format: float }
    ScoreUpdateRequest:
      type: object
      properties:
        childId: { type: integer, format: int64 }
        videoId: { type: integer, format: int64 }
        score: { type: integer }
        percentage: { type: number, format: float }

    Session:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        description: { type: string }
        videoUrl: { type: string }
        thumbnailUrl: { type: string }
    SessionCreateRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }
        description: { type: string }
        videoUrl: { type: string }
        thumbnailUrl: { type: string }
    SessionUpdateRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        videoUrl: { type: string }
        thumbnailUrl: { type: string }
